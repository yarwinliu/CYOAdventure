/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/R2axIWy95x4
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { State } from "@/app/stateHelpers"
import * as myStates from "@/app/stateDeclare"
import { getStorage, ref, getDownloadURL } from 'firebase/storage';
import { initializeApp } from "firebase/app";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyDwQsvw8AJXboF0GmWygf0gtZnd45NM7Cs",
  authDomain: "cyoa-38225.firebaseapp.com",
  projectId: "cyoa-38225",
  storageBucket: "cyoa-38225.appspot.com",
  messagingSenderId: "599148130055",
  appId: "1:599148130055:web:2c839ab233f15534641fa2"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// const [optionAText, hideOptionAText] = useState(false);
// const [optionBText, hideOptionBText] = useState(false);
// const [optionCText, hideOptionCText] = useState(false);

export function GameScreen({ currState, onStateChange, journeyText, optionAText, optionBText, optionCText, onJourneyTextChange, onOptionAChange, onOptionBChange, onOptionCChange, onWin, onLose, onNeutral }) {
  //let currState: State = myStates.state1; //the start state

  // Functions to handle changing the texts
  const HandleClick = (option:number) => {
    if(currState.next.length==0){ //if ending of the game
      if(currState.status=="win"){onWin();}
      if(currState.status=="lose"){onLose();}
      if(currState.status=="neutral"){onNeutral();}
    }
    onOptionAChange(""); //clear the text first
    onOptionBChange("");
    onOptionCChange("");

    if(currState.next.length>=option){

      //console.log("the state is now: ", currState.next[option].state.state)

      currState = currState.next[option].state;
      onStateChange(currState);
      //console.log("the state is: ", currState.state)

    } else{
      console.log("not a valid state");
    }

    if(currState.next.length>1){
      onOptionAChange(currState.next[0].description);
    } 
    if(currState.next.length>1){
      onOptionBChange(currState.next[1].description);
    }
    if(currState.next.length>2){
      onOptionCChange(currState.next[2].description);
    }
    
    onJourneyTextChange(currState.story);
  }

  const handleOptionAButtonClick = () => {
    HandleClick(0);
  };

  const handleOptionBButtonClick = () => {
    HandleClick(1);
  };

  const handleOptionCButtonClick = () => {
    HandleClick(2);
  };

  const [imageUrl, setImageUrl] = useState(''); // State variable to store the image URL

  useEffect(() => {
    // Fetch the image URL from Firebase when the component mounts or when currentState changes
    console.log('Current state:', currState);
    if (currState) {
      getImageUrlFromFirebase(currState)
        .then(imageUrl => {
          setImageUrl(imageUrl);
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }
  }, [currState]);

  // Get a reference to the storage service
  const storage = getStorage(app);

  // Function to get image URL from Firebase storage
  const getImageUrlFromFirebase = async (currentState) => {
    try {
      const imageRef = ref(storage, `state${currentState.state}.jpeg`);
      const imageUrl = await getDownloadURL(imageRef);
      console.log('Image URL:', imageUrl);
      return imageUrl;
    } catch (error) {
      console.error('Error:', error);
      throw error; // Throw the error to handle it in the component
    }
  };


  return (
    <div className="max-w-screen mx-auto p-4 bg-white h-screen">
      <div className="flex justify-between items-center mb-6">
        <div className="flex space-x-2">
          <HeartIcon className="w-6 h-6 text-red-500" />
          <HeartIcon className="w-6 h-6 text-red-500" />
          <HeartIcon className="w-6 h-6 text-red-500" />
        </div>
        <div className="flex space-x-4">
          <div className="bg-gray-200 px-4 py-1">Potential</div>
          <SettingsIcon className="w-6 h-6 text-gray-600" />
        </div>
      </div>
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div className="bg-gray-100 p-4">
          <p className="text-lg font-semibold text-black text-center">{journeyText}</p>
        </div>
        <div className="bg-gray-100 p-4 flex justify-center items-center">
          {imageUrl && (
            <img
              alt="Uploaded"
              className="mb-2"
              height="auto"
              src={imageUrl}
              style={{
                maxWidth: "80%",
                height: "auto",
                objectFit: "cover",
              }}
              width="100%"
            />
          )}
        </div>
      </div>
      <div className="flex justify-center space-x-2 mt-6">
        <Button className="black px-12 py-3" onClick={handleOptionAButtonClick}>
          {optionAText}
        </Button>
        <Button className="black px-12 py-3" onClick={handleOptionBButtonClick}>
          {optionBText}
        </Button>
        <Button className="black px-12 py-3" onClick={handleOptionCButtonClick}>
          {optionCText}
        </Button>
      </div>
    </div>
    );
}

interface HeartIconProps {
  [key: string]: any;
}



function HeartIcon(props: HeartIconProps) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
    </svg>
  )
}

interface SettingsIconProps {
  [key: string]: any;
}

function SettingsIcon(props: SettingsIconProps) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}
